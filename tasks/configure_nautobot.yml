

- name: Check if SECRET_KEY file is present
  ansible.builtin.stat:
    path: "{{ nautobot_root }}/generated_secret_key"
  become: true
  become_user: "{{ nautobot_user }}"
  register: generated_secret_key

- name: Load SECRET_KEY
  block:
  - name: Load saved SECRET_KEY
    ansible.builtin.slurp:
      src: "{{ nautobot_root }}/generated_secret_key"
    register: nautobot_secret_key_file
  - name: Set nautobot_config.SECRET_KEY param
    ansible.builtin.set_fact:
      nautobot_config: "{{ nautobot_config | combine({'SECRET_KEY': nautobot_secret_key_file['content']}) }}"
  when: generated_secret_key.stat.exists

- name: Generate a SECRET_KEY
  block:
  - name: Generate a SECRET_KEY for Nautobot if unspecified
    ansible.builtin.set_fact:
      SECRET_KEY:  "{{ lookup('password', './generated_secret_key chars=ascii_letters,digits,hexdigits,punctuation length=60') }}"
    become: true
    become_user: "{{ nautobot_user }}"
  - name: Copy SECRET_KEY
    ansible.builtin.copy:
      src: "./generated_secret_key"
      dest: "{{ nautobot_root }}/generated_secret_key"
      owner: "{{ nautobot_user }}"
      group: "{{ nautobot_group }}"
      mode: '0640'
    register: copy_secret_key
  - name: Check if SECRET_KEY file is present
    ansible.builtin.stat:
      path: "{{ nautobot_root }}/generated_secret_key"
    become: true
    become_user: "{{ nautobot_user }}"
    register: generated_secret_key
  - name: Check if checksum is correct
    assert:
      that:
        - "generated_secret_key.stat.checksum == copy_secret_key.checksum"
      msg: "Checksum not correct of local and remote file"
  - name: Delete local SECRET_KEY file
    file:
      path: "{{ playbook_dir }}/generated_secret_key"
      state: absent
    when: generated_secret_key.stat.checksum == copy_secret_key.checksum
  when: nautobot_config.SECRET_KEY is undefined or not generated_secret_key.stat.exists

- name: Generate NetBox configuration file
  ansible.builtin.template:
    src: nautobot_config.py.j2
    dest: "{{ nautobot_root }}/nautobot_config.py"
    owner: "{{ nautobot_user }}"
    group: "{{ nautobot_group }}"
    # mode: 0640
    # validate: "{{ nautobot_virtualenv_path }}/bin/python -c \"import py_compile,os; f=r'%s';\
    #            c='/tmp/' + os.path.basename(os.path.dirname(f)) + '-' + os.path.basename(f) + 'c';\
    #            py_compile.compile(f, c); os.remove(c)\""
  become: True
  # notify:
  #   - reload nautobot.service

# TODO:
  # nautobot-server createsuperuser
  # nautobot-server collectstatic
    # Creates ./git ./static ./media ./jobs
